##################################################################################
env:
  TERM: alacritty
##################################################################################
window:
  startup_mode: Maximized
################################################################################################################
scrolling:
  history: 10000
  multiplier: 3

################################################################################################################

font:
  normal:
    family: Source Code Pro
    style: Regular
  bold:
    family: Source Code Pro
    style: Bold
  italic:
    family: Source Code Pro
    style: Italic
  #bold_italic:
    family: Source Code Pro
    style: Bold Italic

  size: 11.0
################################################################################################################

draw_bold_text_with_bright_colors: true

################################################################################################################
colors:
  primary:
    background: '0x021b21'
    foreground: '0xe8dfd6'

  cursor:
    text: CellBackground
    cursor: CellForeground

  vi_mode_cursor:
    text: CellBackground
    cursor: CellForeground

  selection:
    text: CellBackground
    background: CellForeground

  search:
    matches:
      foreground: '#000000'
      background: '#ffffff'

    bar:
      background: '#c5c8c6'
      foreground: '#1d1f21'

  normal:
    black:   '0x032c36'
    red:     '0xc2454e'
    green:   '0x7cbf9e'
    yellow:  '0x8a7a63'
    blue:    '0x2e3340'
    magenta: '0xff5879'
    cyan:    '0x44b5b1'
    white:   '0xf2f1b9'

  bright:
    black:   '0x065f73'
    red:     '0xef5847'
    green:   '0xa2d9b1'
    yellow:  '0xbeb090'
    blue:    '0x61778d'
    magenta: '0xff99a1'
    cyan:    '0x9ed9d8'
    white:   '0xf6f6c9'

bell:
  # Values for `animation`:
  #   - Ease
  #   - EaseOut
  #   - EaseOutSine
  #   - EaseOutQuad
  #   - EaseOutCubic
  #   - EaseOutQuart
  #   - EaseOutQuint
  #   - EaseOutExpo
  #   - EaseOutCirc
  #   - Linear
  animation: Linear

  duration: 100 

  color: '#ff0000'

background_opacity: 0.9 

selection:
  #semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: true

cursor:
  # Cursor style
  #
  # Values for `style`:
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Beam

  # Vi mode cursor style
  #
  # If the vi mode cursor style is `None` or not specified, it will fall back to
  # the style of the active value of the normal cursor.
  #
  # See `cursor.style` for available options.
  vi_mode_style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

  # Thickness of the cursor relative to the cell width as floating point number
  # from `0.0` to `1.0`.
  thickness: 0.15

live_config_reload: true

# Send ESC (\x1b) before characters when alt is pressed.
alt_send_esc: true

mouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  hide_when_typing: true

  url:
    launcher:
      program: xdg-open
      args: []

    modifiers: None


    ################################################################################
    ################################################################################
    ################################################################################
    ################################################################################
    ################################################################################
    ################################################################################
    ################################################################################
    ################################################################################
    ################################################################################
    ################################################################################




# Mouse bindings
#
# To trigger mouse bindings when an application running within Alacritty captures the mouse, the
# `Shift` modifier is automatically added as a requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - SearchForward
#   - SearchBackward
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollHalfPageUp
#   - ScrollHalfPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ClearSelection
#   - ReceiveChar
#   - None
#
#   (`mode: Vi` only):
#   - Open
#   - Up
#   - Down
#   - Left
#   - Right
#   - First
#   - Last
#   - FirstOccupied
#   - High
#   - Middle
#   - Low
#   - SemanticLeft
#   - SemanticRight
#   - SemanticLeftEnd
#   - SemanticRightEnd
#   - WordRight
#   - WordLeft
#   - WordRightEnd
#   - WordLeftEnd
#   - Bracket
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#   - SearchNext
#   - SearchPrevious
#   - SearchStart
#   - SearchEnd
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
#   (Linux/BSD only):
#   - CopySelection: Copies into selection buffer
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.
key_bindings:
  - { key: Paste,                                action: Paste          }
  - { key: Copy,                                 action: Copy           }
  - { key: L,         mods: Control,             action: ClearLogNotice }
  - { key: L,         mods: Control, mode: ~Vi,  chars: "\x0c"          }
  - { key: PageUp,    mods: Shift,   mode: ~Alt, action: ScrollPageUp,  }
  - { key: PageDown,  mods: Shift,   mode: ~Alt, action: ScrollPageDown }
  - { key: Home,      mods: Shift,   mode: ~Alt, action: ScrollToTop,   }
  - { key: End,       mods: Shift,   mode: ~Alt, action: ScrollToBottom }

    #Vi Mode
  - { key: Space,  mods: Shift|Control, mode: Vi, action: ScrollToBottom          }
  - { key: Space,  mods: Shift|Control,           action: ToggleViMode            }
  - { key: Escape,                      mode: Vi, action: ClearSelection          }
  - { key: I,                           mode: Vi, action: ScrollToBottom          }
  - { key: I,                           mode: Vi, action: ToggleViMode            }
  - { key: Y,      mods: Control,       mode: Vi, action: ScrollLineUp            }
  - { key: E,      mods: Control,       mode: Vi, action: ScrollLineDown          }
  - { key: G,                           mode: Vi, action: ScrollToTop             }
  - { key: G,      mods: Shift,         mode: Vi, action: ScrollToBottom          }
  - { key: B,      mods: Control,       mode: Vi, action: ScrollPageUp            }
  - { key: F,      mods: Control,       mode: Vi, action: ScrollPageDown          }
  - { key: U,      mods: Control,       mode: Vi, action: ScrollHalfPageUp        }
  - { key: D,      mods: Control,       mode: Vi, action: ScrollHalfPageDown      }
  - { key: Y,                           mode: Vi, action: Copy                    }
  - { key: Y,                           mode: Vi, action: ClearSelection          }
  - { key: Copy,                        mode: Vi, action: ClearSelection          }
  - { key: V,                           mode: Vi, action: ToggleNormalSelection   }
  - { key: V,      mods: Shift,         mode: Vi, action: ToggleLineSelection     }
  - { key: V,      mods: Control,       mode: Vi, action: ToggleBlockSelection    }
  - { key: V,      mods: Alt,           mode: Vi, action: ToggleSemanticSelection }
  - { key: Return,                      mode: Vi, action: Open                    }
  - { key: K,                           mode: Vi, action: Up                      }
  - { key: J,                           mode: Vi, action: Down                    }
  - { key: H,                           mode: Vi, action: Left                    }
  - { key: L,                           mode: Vi, action: Right                   }
  - { key: Up,                          mode: Vi, action: Up                      }
  - { key: Down,                        mode: Vi, action: Down                    }
  - { key: Left,                        mode: Vi, action: Left                    }
  - { key: Right,                       mode: Vi, action: Right                   }
  - { key: Key0,                        mode: Vi, action: First                   }
  - { key: Key4,   mods: Shift,         mode: Vi, action: Last                    }
  - { key: Key6,   mods: Shift,         mode: Vi, action: FirstOccupied           }
  - { key: H,      mods: Shift,         mode: Vi, action: High                    }
  - { key: M,      mods: Shift,         mode: Vi, action: Middle                  }
  - { key: L,      mods: Shift,         mode: Vi, action: Low                     }
  - { key: B,                           mode: Vi, action: SemanticLeft            }
  - { key: W,                           mode: Vi, action: SemanticRight           }
  - { key: E,                           mode: Vi, action: SemanticRightEnd        }
  - { key: B,      mods: Shift,         mode: Vi, action: WordLeft                }
  - { key: W,      mods: Shift,         mode: Vi, action: WordRight               }
  - { key: E,      mods: Shift,         mode: Vi, action: WordRightEnd            }
  - { key: Key5,   mods: Shift,         mode: Vi, action: Bracket                 }
  - { key: Slash,                       mode: Vi, action: SearchForward           }
  - { key: Slash,  mods: Shift,         mode: Vi, action: SearchBackward          }
  - { key: N,                           mode: Vi, action: SearchNext              }
  - { key: N,      mods: Shift,         mode: Vi, action: SearchPrevious          }

    #(Windows, Linux, and BSD only)
  - { key: V,        mods: Control|Shift,           action: Paste            }
  - { key: C,        mods: Control|Shift,           action: Copy             }
  - { key: F,        mods: Control|Shift,           action: SearchForward    }
  - { key: B,        mods: Control|Shift,           action: SearchBackward   }
  - { key: C,        mods: Control|Shift, mode: Vi, action: ClearSelection   }
  - { key: Insert,   mods: Shift,                   action: PasteSelection   }
  - { key: Key0,     mods: Control,                 action: ResetFontSize    }
  - { key: Equals,   mods: Control,                 action: IncreaseFontSize }
  - { key: Add,      mods: Control,                 action: IncreaseFontSize }
  - { key: Subtract, mods: Control,                 action: DecreaseFontSize }
  - { key: Minus,    mods: Control,                 action: DecreaseFontSize }


